{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "policyName": {
        "type": "string",
        "defaultValue": "ResurfacePolicy",
        "metadata": {
          "description": "Azure APIM Logger service Policy with an Azure Event Hub as log destination."
        }
      },
      "apiManagementServiceName": {
        "type": "string"
      },
      "loggerID": {
        "type": "string",
        "defaultValue": "ResurfaceLogger"
      },
      "partitionNumber": {
        "type": "string",
        "defaultValue": "0"
      }
    },
    "resources": [
      {
        "name": "[parameters('policyName')]",
        "type": "Microsoft.ApiManagement/service/apis/policies",
        "apiVersion": "2019-12-01",
        "dependsOn": [
          "[concat('Microsoft.ApiManagement/service/', parameters('apiManagementServiceName'))]"
        ],
        "properties": {
          "value": "[concat('<policies>
    <inbound>
        <set-variable name=\"request-string\" value=\"@{
          var body = context.Request.Body?.As<string>(true);
          if (body != null && body.Length > 1024)
          {
            body = body.Substring(0, 1024);
          }

          var headers = context.Request.Headers
                                          .Where(h => h.Key != \"Authorization\" && h.Key != \"Ocp-Apim-Subscription-Key\")
                                          .Select(h => string.Format(\"{0}: {1}\", h.Key, String.Join(\",\", h.Value)))
                                          .ToArray<string>();

          return new JObject(
            new JProperty(\"method\", context.Request.Method),
            new JProperty(\"url\", context.Request.Url.ToString()),
            new JProperty(\"body\", body is null ? string.Empty : body),
            new JProperty(\"headers\", headers)).ToString();
        }\" />
    </inbound>
    <backend>
        <forward-request follow-redirects=\"true\" />
    </backend>
    <outbound>
        <log-to-eventhub logger-id=\"', parameters('loggerID'),'\" partition-id=\"',parameters('partitionNumber'),'\">@{
          var body = context.Response.Body?.As<string>(true);
          if (body != null && body.Length > 1024)
          {
            body = body.Substring(0, 1024);
          }

          var headers = context.Response.Headers
                                          .Select(h => string.Format(\"{0}: {1}\", h.Key, String.Join(\",\", h.Value)))
                                          .ToArray<string>();

          var response = new JObject(
            new JProperty(\"status\", context.Response.StatusCode),
            new JProperty(\"body\", body),
            new JProperty(\"headers\", headers)
          );


          return new JObject(
            new JProperty(\"request\", context.Variables[\"request-string\"]),
            new JProperty(\"response\", response.ToString())
          ).ToString();

     }</log-to-eventhub>
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>')]"
        }
      }
    ],
    "outputs": {
    }
  }
