{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "apiManagementServiceName": {
        "type": "string"
      },
      "loggerID": {
        "type": "string",
        "defaultValue": "ResurfaceLogger",
        "metadata": {
          "description": "Identifier for the Azure APIM Logger service"
        }
      },
      "eventHubNamespaceName": {
        "type": "string",
        "defaultValue": "ResurfaceEH"
      },
      "eventHubInstanceName": {
        "type": "string",
        "defaultValue": "ResurfaceLoggingEH"
      },
      "partitionNumber": {
        "type": "string",
        "defaultValue": "0",
        "metadata": {
          "description": "EventHubs partition"
        }
      }
    },
    "resources": [
      {
        "apiVersion": "2017-03-01",
        "type": "Microsoft.ApiManagement/service/loggers",
        "name": "[concat(parameters('apiManagementServiceName'),'/',parameters('loggerID'))]",
        "properties": {
          "loggerType": "azureEventHub",
          "description": "Resurface Logger",
          "credentials": {
            "name": "[parameters('eventHubInstanceName')]",
            "connectionString": "[listKeys(resourceId('Microsoft.EventHub/namespaces/authorizationRules',parameters('eventHubNamespaceName'),'RootManageSharedAccessKey'),'2017-04-01').primaryConnectionString]"
          }
        }
      },
      {
        "apiVersion": "2019-12-01",
        "type": "Microsoft.ApiManagement/service/policies",
        "name": "[concat(parameters('apiManagementServiceName'),'/policy')]",
        "properties": {
          "format": "rawxml",
          "value": "[concat('<policies>
          <inbound>
          <set-variable name=\"request-string\" value=\"@{
            var body = context.Request.Body?.As<string>(true);
            if (body != null && body.Length > 1024)
            {
              body = body.Substring(0, 1024);
            }
            var headers = context.Request.Headers
                                            .Where(h => h.Key != \"Authorization\" && h.Key != \"Ocp-Apim-Subscription-Key\")
                                            .Select(h => string.Format(\"{0}: {1}\", h.Key, String.Join(\",\", h.Value)))
                                            .ToArray<string>();
            return new JObject(
              new JProperty(\"method\", context.Request.Method),
              new JProperty(\"url\", context.Request.Url.ToString()),
              new JProperty(\"body\", body is null ? string.Empty : body),
              new JProperty(\"headers\", headers)).ToString();
            }\" />
          </inbound>
          <backend>
            <forward-request follow-redirects=\"true\" />
          </backend>
          <outbound>
            <log-to-eventhub logger-id=\"',parameters('loggerID'),'\" partition-id=\"',parameters('partitionNumber'),'\">@{
              var body = context.Response.Body?.As<string>(true);
              if (body != null && body.Length > 1024)
              {
                body = body.Substring(0, 1024);
              }
              var headers = context.Response.Headers
                                                .Select(h => string.Format(\"{0}: {1}\", h.Key, String.Join(\",\", h.Value)))
                                                .ToArray<string>();
              var response = new JObject(
                new JProperty(\"status\", context.Response.StatusCode),
                new JProperty(\"body\", body),new JProperty(\"headers\", headers)
              );

              return new JObject(
                new JProperty(\"request\", context.Variables[\"request-string\"]),
                new JProperty(\"response\", response.ToString())
              ).ToString();
            }</log-to-eventhub>
          </outbound>
          </policies>')]"
        }
      }
    ],
    "outputs": {
    }
  }
