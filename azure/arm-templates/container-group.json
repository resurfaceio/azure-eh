{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "containerGroupName": {
        "type": "string",
        "defaultValue": "ResurfaceContainers",
        "metadata": {
          "description": "Group for Resurface containers."
        }
      },
      "eventHubsNamespaceName": {
        "type": "string"
      },
      "eventHubsInstanceName": {
        "type": "string"
      },
      "partitionNumber": {
        "type": "string",
        "defaultValue": "0"
      },
      "resurfaceRules": {
        "type": "string",
        "defaultValue": "include default"
      },
      "entitlementToken": {
        "type": "string",
        "metadata": {
          "description": "Entitlement token from https://resurface.io/v3-registration"
        }
      }
    },
    "variables": {
      "resurfacecontainer": "resurface",
      "resurfaceimage": "docker.resurface.io/release/resurface:3.0.17",
      "ehlistenercontainer": "azure-eh-listener",
      "ehlistenerimage": "docker.resurface.io/release/azure-eh-listener:1.0.0",
      "label": "[concat(variables('resurfacecontainer'), '-' , resourceGroup().name)]"
    },
    "resources": [
      {
        "apiVersion": "2019-12-01",
        "type": "Microsoft.ContainerInstance/containerGroups",
        "name": "[parameters('containerGroupName')]",
        "location": "[resourceGroup().location]",
        "properties": {
          "imageRegistryCredentials": [
            {
              "server": "docker.resurface.io",
              "username": "resurfacelabs/release",
              "password": "[parameters('entitlementToken')]"
            }
          ],
          "containers": [
            {
              "name": "[variables('resurfacecontainer')]",
              "properties": {
                "image": "[variables('resurfaceimage')]",
                "resources": {
                  "requests": {
                    "cpu": 2,
                    "memoryInGb": 8
                  }
                },
                "ports": [
                  {
                    "port": 7700
                  },
                  {
                    "port": 7701
                  }
                ]
              }
            },
            {
              "name": "[variables('ehlistenercontainer')]",
              "properties": {
                "image": "[variables('ehlistenerimage')]",
                "resources": {
                  "requests": {
                    "cpu": 1,
                    "memoryInGb": 1.5
                  }
                },
                "environmentVariables": [
                  {
                    "name": "USAGE_LOGGERS_URL",
                    "value": "[concat('http://', variables('label'),'.', resourceGroup().location, '.azurecontainer.io:7701/message')]"
                  },
                  {
                    "name": "USAGE_LOGGERS_RULES",
                    "value": "[parameters('resurfaceRules')]"
                  },
                  {
                    "name": "AZURE_EH_CONNECTION_STRING",
                    "value": "[listKeys(resourceId('Microsoft.EventHub/namespaces/authorizationRules',parameters('eventHubsNamespaceName'),'RootManageSharedAccessKey'),'2017-04-01').primaryConnectionString]"
                  },
                  {
                    "name": "PARTITION_NUMBER",
                    "value": "[parameters('partitionNumber')]"
                  },
                  {
                    "name": "EVENT_HUB_NAME",
                    "value": "[parameters('eventHubsInstanceName')]"
                  }
                ]
              }
            }
          ],
          "osType": "Linux",
          "ipAddress": {
            "type": "Public",
            "dnsNameLabel": "[variables('label')]",
            "ports": [
              {
                "protocol": "tcp",
                "port": 7700
              },
              {
                "protocol": "tcp",
                "port": 7701
              }
            ]
          }
        }
      }
    ],
    "outputs": {
      "containerIPv4Address": {
        "type": "string",
        "value": "[reference(resourceId('Microsoft.ContainerInstance/containerGroups/', parameters('containerGroupName'))).ipAddress.ip]"
      }
    }
  }
